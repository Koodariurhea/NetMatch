//********************************************************************************
// Map.cb
//
// Karttaan liittyvät toiminnot
//********************************************************************************

// Yleinen karttojen versio
Const MAP_VERSION#  = 1.1

//--------------------------------------------------------------------------------
// Tyyppikokoelma karttoja varten, tähän tallennetan kaikki kartan tiedot ja 
// pikkukuvat. Kartta ladataan kokonaisuutena muistiin vasta pelissä.
//--------------------------------------------------------------------------------
Type MAPS
    Field ID                    // Ykkösestä alkava uniikki numero
    Field filePath As String    // Tiedostopolku
    Field name As String        // Nimi
    Field author As String      // Tekijä
    Field CRC                   // CRC32-sormenjälki client-server tarkistusta varten
    Field animDelay             // Kuinka tiuhaan karttaa animoidaan
    Field thumbnail             // Esikatselukuva
    Field maxPlayers            // Pelaajien maksimimäärä
    Field teamPlayers           // Yhdessä joukkueessa olevien pelaajien maksimimäärä
    Field maxBots               // Bottien maksimimäärä
    Field botDelete             // Minkä pelaajamäärän jälkeen poistetaan botti pelistä
    Field botWeapons As String  // Mitä aseita botit voivat käyttää. Pilkuin eroteltu merkkijono (esim. 1,2,5)
    Field botNames As String    // Bottien nimet
    Field amountHealth          // Health-pakettien määrä
    Field amountAmmo            // Konekiväärin ammusten määrä
    Field amountRocket          // Raketinheittimen ammusten määrä
    Field amountFuel            // Moottorisahan ammusten määrä
    Field amountShotgun         // Haulikon ammusten määrä
    Field amountLauncher        // Kranaatinheittimen ammusten määrä
EndType

//--------------------------------------------------------------------------------
// Tyyppikokoelma karttalistoja varten.
//--------------------------------------------------------------------------------
Type MAPLISTS
    Field listName As String    // Listan nimi, pitää olla uniikki
    Field mapPtr                // Osoitin MAPS-kokoelman jäseneen
EndType

//--------------------------------------------------------------------------------
// Nykyisen kartan asetukset sisältävät globaalit, joita käytetään pelissä.
//--------------------------------------------------------------------------------
Global gMapMaxPlayers, gMapTeamPlayers, gMapMaxBots, gMapBotDelete
Global gMapHealth, gMapAmmo, gMapRocket, gMapFuel, gMapShotgun, gMapLauncher
Global  gMapAnimDelay, gMapCRC
Global gBotWeapons$
gMapMaxPlayers  = 0
gMapTeamPlayers = 0
gMapMaxBots     = 0
gMapBotDelete   = 0
gMapHealth      = 0
gMapAmmo        = 0
gMapRocket      = 0
gMapFuel        = 0
gMapShotgun     = 0
gMapLauncher    = 0
gMapAnimDelay   = 0
gMapCRC         = 0
gBotWeapons = "1,2,3"

// Kartan yhden laatan leveys ja korkeus
Global gTileW#, gTileH#
gTileW  = 48
gTileH  = 48

// Karttojen määrä yhteensä. Tämä globaali ehkä poistetaan tulevaisuudessa, jos
// sille ei löydetä tarvetta.
Global gMapCount
gMapCount = 0

// Näissä globaaleissa sijaitsevat muistiin ladattu kartta ja kaikkialle
// levittäytyvä taustakuva, lattia.
Global gMap, gFloor
gMap = 0
gFloor = 0

// Nykyisen palvelimella olevan kartan nimi
Global gServerMap$
gServerMap = ""

// Näistä globaaleista ei ole suurta varmuutta, mitä ne tekevät :D
Global gServerMapLoop, gServerMapLoopNum
gServerMapLoop = 1
gServerMapLoopNum = 1

// Tämä globaali sisältää tiedon siitä, mikä karttalista on menossa.
Global gMapList$
gServerMapList = ""

// Tässä vakiossa on nykyisen kartan integer-typepointteri MAPS-kokoelman jäseneen.
Global gCurrentMapPtr
gCurrentMapPtr = 0



//================================================================================
// Tämä funktio etsii map-kansiosta kaikki kartat ja lataa niiden tiedot
// muistiin kokoelmaan MAPS.
//================================================================================
SearchMaps()
Function SearchMaps()
    // Siirrytään map-kansioon.
    ChDir "map"
    mapFiles$ = ""
    mapAuthors$ = ""
    
    StartSearch
    While True
        file$ = FindFile()
        If file = "" Then Exit
        
        // Tiedostopäätteeksi riittää että katsotaan viimeiset kolme merkkiä.
        ext$ = Lower( Right(file, 3) )
    
        If ext = "mpr" Then
            //--------------------------------------------------------------------
            // mpr-tiedostopäätteen omaavat tiedostot kertovat karttalistasta.
            //--------------------------------------------------------------------
            mprMaps$ = ""
            f = OpenToRead(file)
                While Not EOF(f)
                    txt$ = ReadLine(f)
                    If Upper(GetWord2(txt, 1, "=")) = "MAPS" Then
                        mprMaps = Trim(GetWord2(txt, 2, "="))
                        Exit
                    EndIf
                Wend
            CloseFile f

            For i = 1 To CountWords(mprMaps, ",")
                mapFile$ = GetWord2(mprMaps, i, ",") + ".mpc"
                AddMapToList( mapFile$, Left( file$, Len( file$ ) - 4 ) )
            Next i
        EndIf
        
        If ext = "mpc" Then
            // mpc-tiedostopäätteen omaavat tiedostot ovat karttoja.
            // Lisätään kartta muistiin.
            AddMap( file$ )
            
        EndIf
    Wend
    EndSearch
    
    ChDir ".."
    
    For iMap.MAPS = Each MAPS
        // Katsotaan josko tämä kartta on sama kuin NetMatch.cfg tiedostossa
        // määrätty kartta. Jos on niin laitetaan globaaliin gGameMap tämän kartan ID.
        If Lower( iMap\name ) = Lower( gGameMapName ) Then gGameMap = iMap\ID
    Next iMap
    
EndFunction

// gMapNames-taulukon rakenne:
// (i, 0) = Ei mikään
// (i, 1) = Kartan nimi, MAPS\name
// (i, 2) = Kartan tekijä, MAPS\author
// (i, 3) = Kommenttien perusteella ollut joskus esikatselukuva, MAPS\thumbnail

// Muutetaan taulukko salakavalasti funktioksi
//Dim gMapNames$(Int(Max(1, gMapCount)), 3)
Function gMapNames$( _mapID, _field )
    For iMap.MAPS = Each MAPS
        If iMap\ID = _mapID Then
            // Tästä kartasta haluttiin tietoja
            If _field = 1 Then
                // Kartan nimi haluttiin
                Return iMap\name
            ElseIf _field = 2 Then
                // Haluttiin kartan tekijä
                Return iMap\author
            EndIf
        EndIf
    Next iMap
    
    // Jos mitään ei ole vielä palautettu, palautetaan tyhjä merkkijono.
    Return ""
EndFunction

// gMapImages-taulukkoa käytetään vain esikatselukuvakkeiden hakupaikkana.
// (i, 1) = Esikatselukuvake

// Muutetaan taulukko salakavalasti funktioksi
//Dim gMapImages(Int(Max(1, gMapCount)), 2)
Function gMapImages( _mapID, _uselessParam = 1337 )
    For iMap.MAPS = Each MAPS
        If iMap\ID = _mapID Then
            // Löydettiin oikea kartta, palautetaan esikatselukuvake.
            Return iMap\thumbnail
        EndIf
    Next iMap
    
    // Jos mitään ei ole vielä palautettu, palautetaan nolla.
    Return 0
EndFunction

//================================================================================
// Lisätään/siirretään objekti satunnaiseen kohtaan kartalle
//================================================================================
Function SpawnObject(_obj)
    tileWh = gTileW / 2
    tileHh = gTileH / 2
    While True
        x = Rand(1, MapWidth())
        y = Rand(1, MapHeight())
        tBack = GetMap2(0, x, y)
        tHit = GetMap2(2, x, y)
        If tBack > 0 And tHit = 0 Then
            wx = (x * gTileW - tileWh) - ((MapWidth() * gTileW) / 2)
            wy = ((y * gTileH - tileHh) - ((MapHeight() * gTileH) / 2)) * -1
            PositionObject _obj, wx, wy
            RotateObject _obj, Rand(0, 360)
            Exit
         EndIf
    Wend
EndFunction


//================================================================================
// Tarkistetaan että annettu positio on kartalla
//================================================================================
Function InMap(_x#, _y#)
    mapX# = (ObjectSizeX(gMap) / 2.0) - ObjectX(gMap)
    mapY# = (ObjectSizeY(gMap) / 2.0) - ObjectY(gMap)
    tileX# = RoundUp((_x + mapX) / gTileW)
    tileY# = RoundUp((mapY - _y) / gTileH)
    backTile = GetMap2(0, tileX, tileY)
    hitTile = GetMap2(2, tileX, tileY)
    If hitTile = 1 Then Return False
    If backTile = 0 Then Return False
    Return True
EndFunction

//================================================================================
// Ladataan kartta peliin. Parametriksi annetaan kartan nimi. (MAPS\name)
//================================================================================
Function LoadGameMap(_mapName$,_loopNum=0)
    gMapMaxPlayers  = 10
    gMapTeamPlayers = 5
    gMapMaxBots     = 5
    gMapBotDelete   = 7
    gMapHealth      = 5
    gMapAmmo        = 5
    gMapRocket      = 5
    gMapFuel        = 5
    gMapShotgun     = 5
    gMapLauncher    = 5
    gBotWeapons     = "1,2,3"

    cfgName$ = _mapName + ".cfg"
//MPR    If CountWords(_mapName, ":") > 1 Then cfgName = GetWord2(_mapName, 1, ":") + ".mpr"
//MPR    _mapName = GetWord2(_mapName, _loopNum + 1, ":")
    found = False
    For iMap.MAPS = Each MAPS
        If Lower( iMap\name ) = Lower( _mapName$ ) Then 
            found = True
            Exit
        EndIf
    Next iMap
    
    If found = False Then
        // Ladataan kartta serveriltä
        If DownloadMap(_mapName) = False Then 
            Error(GetText("map_download_failed"))
            Return False
        EndIf
    EndIf
    
    If gGameMode = CLIENT Then
        If gFloor <> 0 Then
            DeleteObject gFloor
            gFloor = 0
        EndIf
        imgFloor = LoadResourceImage(_mapName + "_back.pxi", "map/" + _mapName + ".mpc", False)
        If imgFloor <> 0 Then 
            gFloor = MakeObjectFloor()
            PaintObject gFloor, imgFloor
            //DeleteImage imgFloor
        EndIf
    EndIf
    
    If gMap <> 0 Then
        DeleteObject gMap
    EndIf
    gMap = LoadResourceMap(_mapName)
    
    If gGameMode = SERVER Then
        LoadMapConfig(cfgName)

        For player.PLAYERS = Each PLAYERS
            botName$            = "Bot_" + player\playerId
            If CountWords(gBotNames, ",") >= player\playerId Then botName = Trim(GetWord2(gBotNames, player\playerId, ","))
            player\botName = botName
        Next player
    EndIf
    
    gTileW = ObjectSizeX(gMap) / MapWidth()
    gTileH = ObjectSizeY(gMap) / MapHeight()
    ObjectPickable gMap, ON
    ShowObject gMap, OFF
    
    gCurrentMapPtr = ConvertToInteger( iMap )
    
    Return True
EndFunction

//================================================================================
// Ladataan kartta netistä. Funktio palauttaa False jos lataus epäonnistui,
// muulloin kokoelmaan muistiin ladatun kartan osoitin.
//================================================================================
Function DownloadMap(_mapName$)
    For i = 0 To 1
        If i Then 
            rtn = HTTPGET("http://netmatch.vesq.org/maps/"+_mapName$+"/"+_mapName$+".mpc",1)
        Else
            rtn = HTTPGET("http://netmatch.vesq.org/maps/"+_mapName$+"/"+_mapName$+".cfg",1)
        EndIf
        If rtn <> 200 Then 
            If rtn = 404 Then 
                Error(GetText("map_not_in_server", _mapName))
                Return False
            Else
                Error(GetText( "unexpected_error" ) )
                Return False
            EndIf
        EndIf
        
        Repeat 
            DrawGame
            DrawImage gImages(IMG_BACKGROUND), 0, 0
            SetFont gFonts(FNT_SETUP)
            Color 255, 255, 0
            CenterText 400, 260, GetText("map_download", _mapName)
            Box 299, 299, 202, 22, OFF
            If i Then
                pr# = 10+Float(HTTPDownloadState()) / HTTP_ContentLength * 90.0
            Else
                pr# = Float(HTTPDownloadState()) / HTTP_ContentLength * 10.0
            EndIf
            Color 0, 255, 0
            Box 300, 300, pr * 2, 20, ON
            DrawScreen
        Until HTTPDownloadState() = HTTP_ContentLength
        
        If i = 0 Then 
            HTTPSaveContent ("map/"+_mapName+".cfg")
        EndIf
    Next i
        HTTPSaveContent ("map/"+_mapName+".mpc")
    
    If FileExists("map/"+_mapName+".cfg") And FileExists("map/"+_mapName+".mpc") Then 
        Return AddMap( _mapName + ".mpc" )
    Else
        Error(getText("unexpected_error"))
        Return False
    EndIf
EndFunction

//================================================================================
// Ladataan kartan asetukset.
//================================================================================
Function LoadMapConfig(_cfgName$)
        
    cfgFile$ = "map/" + Replace(_cfgName, " ", "_")
    gBotNames = ""
    If FileExists(cfgFile) Then
        f = OpenToRead(cfgFile)
        While Not EOF(f)
            txt$ = ReadLine(f)
            key$ = Upper(GetWord2(txt, 1, "="))
            value$ = Trim(GetWord2(txt, 2, "="))
            If key = "MAXPLAYERS" Then gMapMaxPlayers = Int(value)
            If key = "TEAMPLAYERS" Then gMapTeamPlayers = Int(value)
            If key = "BOTCOUNT" Then gMapMaxBots = Int(value)
            If key = "BOTDEPARTLIMIT" Then gMapBotDelete = Int(value)
            If key = "HEALTHITEMS" Then gMapHealth = Int(value)
            If key = "SMGITEMS" Then gMapAmmo = Int(value)
            If key = "BAZOOKAITEMS" Then gMapRocket = Int(value)
            If key = "CHAINSAWITEMS" Then gMapFuel = value
            If key = "SHOTGUNITEMS" Then gMapShotgun = value
            If key = "LAUNCHERITEMS" Then gMapLauncher = value
            If key = "BOTNAMES" Then gBotNames = value
            If key = "BOTWEAPONS" Then gBotWeapons = value
        Wend
        CloseFile f
        If gMapMaxPlayers < 1 Or gMapMaxPlayers > MAX_PLAYERS Then gMapMaxPlayers = 10
        If gMapMaxBots >= gMapMaxPlayers Then gMapMaxBots = Int(gMapMaxPlayers / 2)
        If gMapBotDelete < gMapMaxBots Then gMapBotDelete = gMapMaxBots
            
        tmpWeapons$ = ""
        For i = 1 To CountWords(gBotWeapons, ",")
            wpn = Int(GetWord2(gBotWeapons, i, ","))
            If wpn >= 1 And wpn <= WPN_COUNT Then
                If Len(tmpWeapons) > 0 Then tmpWeapons = tmpWeapons + ","
                tmpWeapons = tmpWeapons + Str(wpn)
            EndIf
        Next i
        gBotWeapons = tmpWeapons
        If gBotWeapons = "" Then
            gBotWeapons = "1,2,3"
        EndIf
    EndIf
EndFunction

Function SaveMapConfig(_mapName$)
    cfgFile$ = "map/" + _mapName + ".cfg"
    f = OpenToWrite(cfgFile)
    
    WriteLine f, "# Pelaajien maksimimäärä"
    WriteLine f, "MaxPlayers=" + gMapMaxPlayers
    WriteLine f, ""
    WriteLine f, "# Bottien määrä"
    WriteLine f, "BotCount=" + gMapMaxBots
    WriteLine f, ""
    WriteLine f, "# Kun pelaajamäärä ylittää tämän arvon, poistuu botti pelistä"
    WriteLine f, "BotDepartLimit=" + gMapBotDelete
    WriteLine f, ""
    WriteLine f, "# Bottien nimet"
    WriteLine f, "BotNames=" + gBotNames
    WriteLine f, ""
    WriteLine f, "# Bottien aseet pilkulla eroteltuna"
    WriteLine f, "# 1 = Pistoolit"
    WriteLine f, "# 2 = Konepitooli"
    WriteLine f, "# 3 = Sinko"
    WriteLine f, "# 4 = Haulikko"
    WriteLine f, "# 5 = Kranaatinlaukaisin"
    WriteLine f, "# 6 = Moottorisaha"
    WriteLine f, "BotWeapons=" + gBotWeapons
    WriteLine f, ""
    WriteLine f, ""
    WriteLine f, "# Kentältä keräiltävien tavaroiden lukumäärät"
    WriteLine f, ""
    WriteLine f, "# Lääkintäpakkaukset"
    WriteLine f, "HealthItems=" + gMapHealth
    WriteLine f, ""
    WriteLine f, "# Konepistoolin ammuslaatikot"
    WriteLine f, "SMGItems=" + gMapAmmo
    WriteLine f, ""
    WriteLine f, "# Singon ammuslaatikot"
    WriteLine f, "BazookaItems=" + gMapRocket
    WriteLine f, ""
    WriteLine f, "# Haulikon ammuslaatikot"
    WriteLine f, "ShotgunItems=" + gMapShotgun
    WriteLine f, ""
    WriteLine f, "# Moottorisahan bensakanisterit"
    WriteLine f, "ChainsawItems=" + gMapFuel
    WriteLine f, ""
    WriteLine f, "# Kranaatinlaukaisimen ammukset"
    WriteLine f, "LauncherItems=" + gMapLauncher
    
    CloseFile f
EndFunction

//================================================================================
// Palauttaa kartan esikatselukuvakkeen nimen perusteella.
//================================================================================
Function GetMapThumbnail(_mapName$)
    For iMap.MAPS = Each MAPS
        If iMap\name = _mapName Then
            Return iMap\thumbnail
        EndIf
    Next iMap
    Return 0
EndFunction

//================================================================================
// Palauttaa kartan tekijän kartan nimen perusteella.
//================================================================================
Function GetMapAuthor$(_mapName$)
    For iMap.MAPS = Each MAPS
        If iMap\name = _mapName Then
            Return iMap\author
        EndIf
    Next iMap
    Return ""
EndFunction

//================================================================================
// Lisää uuden kartan muistiin. Parametriksi annetaan kartan tiedostonimi,
// esimerkiksi AddMap( "Luna.mpc" ). Funktio palauttaa False jos jotain
// meni pahasti mönkään ja heittää erroria Error-funktiolla. Jos kartta on jo
// olemassa tai se lisättiin onnistuneesti, palautetaan sen osoitin.
//================================================================================
Function AddMap( _filePath$ )
    
    // Poistetaan mahdolliset kansiopolut merkkijonosta ja käytetään vain
    // tiedostonimeä.
    _filePath$ = GetFileName( _filePath$ )
    
    // Tiedoston absoluuttinen sijainti ohjelman pääkansiosta tarkistettuna
    absolutePath$ = GetDirectoryPath( GetEXEName() )
    absolutePath$ = absolutePath$ + "map\"
    absolutePath$ = absolutePath$ + _filePath$
    
    If Right( _filePath$, 4 ) <> ".mpc" Then
        If gDirectServer = False Then DrawImage gImages(IMG_BACKGROUND), 0, 0
        Error(GetText("incorrect_map") + " (" + _filePath + ")")
        Return False
    ElseIf Not FileExists( absolutePath$ ) Then
        If gDirectServer = False Then DrawImage gImages(IMG_BACKGROUND), 0, 0
        Error(Replace(GetText("map_not_found"), "%1", _filePath))
        Return False
    ElseIf IsDirectory( absolutePath$ ) Then
        If gDirectServer = False Then DrawImage gImages(IMG_BACKGROUND), 0, 0
        Error(GetText("incorrect_map") + " (" + _filePath + ")")
        Return False
    EndIf
    
    For iMap.MAPS = Each MAPS
        If Lower( iMap\name ) = Lower( Left( _filePath$, Len( _filePath$ ) - 4 ) ) Then
            // Kartta on jo olemassa, palautetaan sen osoitin.
            Return ConvertToInteger( iMap )
        EndIf
    Next iMap
    
    // Palautusarvo sijoitetaan tähän muuttujaan
    ret = 0
    
    mapVersion# = 0
    mVersionData = ExtractData( absolutePath$, "versioninfo.txt" )
    If mVersionData <> 0 Then
        mapVersion# = PeekFloat(mVersionData, 0)
    EndIf
    If mapVersion = MAP_VERSION Then
        offset = 4
        strLen = PeekInt(mVersionData, offset) : offset + 4
        author$ = ""
        For i = 1 To strLen
            c = PeekByte(mVersionData, offset) : offset + 1
            author$ = author$ + Chr(c)
        Next i
        
        // Lisätään tämä kartta kokoelmaan.
        newMap.MAPS = New( MAPS )
        newMap\filePath = absolutePath$
        newMap\name = Left( _filePath$, Len( _filePath$ ) - 4 )
        newMap\author = author$
        
        // Ladataan esikatselukuva muistiin.
        newMap\thumbnail = LoadResourceImage( newMap\name + "_thb.pxi", newMap\filePath )
        
        // Laitetaan kartan ID:ksi edellisen kartan ID:stä yksi suurempi.
        befMap.MAPS = Before( newMap )
        If befMap <> NULL Then
            newMap\ID = befMap\ID + 1
        Else
            // Oli ensimmäinen kartta, joka ladattiin.
            newMap\ID = 1
        EndIf
        
        gMapCount = gMapCount + 1
        
        ret = ConvertToInteger( newMap )
    Else
        If gDirectServer = False Then DrawImage gImages(IMG_BACKGROUND), 0, 0
        Error( GetText("incorrect_map") + " (" + _filePath + ")" )
        ret = False
    EndIf
    If mVersionData <> 0 Then
        DeleteMEMBlock mVersionData
    EndIf

    Return ret
EndFunction

//================================================================================
// Lisää kartan karrtalistaan looppausta varten.
//   - 1. parametri on kartan tiedostopolku
//   - 2. parametri on karttalistan nimi
//================================================================================
Function AddMapToList( _filePath$, _listName$ )
    intPtr = AddMap( _filePath$ )
    
    If intPtr = 0 Then Return False
    
    For iList.MAPLISTS = Each MAPLISTS
        // Tarkistetaan ettei karttaa lisätä uudelleen samaan listaan.
        If iList\listName = _listName Then
            If iList\mapPtr = intPtr Then
                Return False
            EndIf
        EndIf
    Next iList
    
    iList.MAPLISTS = New( MAPLISTS )
    iList\listName = _listName$
    iList\mapPtr   = intPtr
    
    Return True
EndFunction

//================================================================================
// Palauttaa nykyisen kartan osoittimen gServerMapLoopNum globaalin pohjalta. Jos 
// ollaan viimeisessä listan kartassa, palautetaan ensimmäinen. Jos karttalistaa 
// ei jostain kumman syystä löydy MAPLISTS-kokoelmasta, kaadetaan koko peli,
// koska virhe on todella kriittinen. Muuten virhe olisi vain MAV. Jos joudutaan
// kiertämään lista alkuun asti, asetetaan gServerMapLoopNum arvoksi 1. 
// Jos parametri annetaan ja se on <> 0, palautetaan listan ensimmäinen kartta.
//================================================================================
Function GetCurrentMap( _mapLoopNumOverride = 0 )

    If gServerMapLoop = 0 Then
        // Ei käytetä karttalistaa vaan pelataan vain yhdellä kartalla.
        // Palautetaan nykyisen kartan osoitin.
        For iMap.MAPS = Each MAPS
            If iMap\ID = gGameMap Then
                Return ConvertToInteger( iMap )
            EndIf
        Next iMap
        
        // Karttaa ei löytynyt listalta?! Kriittinen virhe!
        MakeError "Current map not found in GetCurrentMap()-function!"+Chr(13)+Chr(10)+"Please report this error to the developers of NetMatch."
    EndIf

    If _mapLoopNumOverride <> 0 Then
        // Ollaan kierretty lista läpi, joten aloitetaan etsimään 1. jäsenestä
        gServerMapLoop = 1
    EndIf
    
    mapNum = 1
    For iList.MAPLISTS = Each MAPLISTS
        If iList\listName = gMapList Then
            // Löytyi oikea karttalista, palautetaan siitä seuraava kartta.
            If mapNum = gServerMapLoop Then
                loopedAround = False
                // Käydään listaa läpi kunnes löydetään seuraava listan kartta
                iList.MAPLISTS = After( iList )
                While True
                    If iList <> NULL Then
                        If iList\listName = gMapList Then
                            // Löydettiin listasta seuraava kartta
                            Return iList\mapPtr
                        EndIf
                        
                        // Ei ollut samaan listaan kuuluva jäsen, jatketaan...
                        iList.MAPLISTS = After( iList )
                    Else
                        // Jos ollaan jo kerran päädytty tänne, poistutaan silmukasta.
                        If loopedAround = True Then Exit
                        
                        // Osuttiin jo listan viimeiseen jäseneen, aloitetaan alusta.
                        iList.MAPLISTS = First( MAPLISTS )
                        loopedAround = True
                    EndIf
                Wend
                // Poistutaan uloimmasta MAPLISTS-silmukasta
                Exit
            EndIf
            // Etsitään seuraavaa karttaa.
            mapNum = mapNum + 1
        EndIf
    Next iList
    
    // Jos päästiin tänne asti jo, niin se luultavasti tarkoittaa sitä ettei
    // listalla ollut enää seuraavaa karttaa vaan lista pitäisi kiertää
    // takaisin alkuun. Kutsutaan funktiota uudelleen parametrin kanssa,
    // jolloin funktio alkaakin hakea heti ensimmäistä karttalistan jäsentä.
    If _mapLoopNumOverride = 0 Then
        Return GetCurrentMap( True )
    Else
        // Jostain kumman syystä myöskään pakotettu listan ensimmäisen jäsenen
        // haku ei onnistunut. Tällöin virhe on todella kriittinen ja peli
        // täytyy sulkea voimakeinoin. Tätä ei pitäisi koskaan tapahtua.
        MakeError "Critical error in GetCurrentMap()-function!"+Chr(13)+Chr(10)+"Please report this error to the developers of NetMatch."
    EndIf
    
EndFunction
